/* lang/types header-forward file, generated with rock, the ooc compiler written in ooc */

#ifndef __lang_types_fwd__
#define __lang_types_fwd__

#include <stdlib.h>
#include <stdio.h>
#include <ctype.h>
#include <stdint.h>
#include <stdbool.h>
#include <string.h>

struct _lang__Object;
typedef struct _lang__Object lang__Object;
struct _lang__Class;
typedef struct _lang__Class lang__Class;
struct _lang__None;
typedef struct _lang__None lang__None;
typedef void lang__Void;
typedef void* lang__Pointer;
typedef char lang__Char;
typedef signed char lang__SChar;
typedef unsigned char lang__UChar;
typedef wchar_t lang__WChar;
typedef char* lang__String;
typedef signed long long lang__LLong;
typedef signed long lang__Long;
typedef signed short lang__Short;
typedef signed int lang__Int;
typedef unsigned long long lang__ULLong;
typedef unsigned long lang__ULong;
typedef unsigned int lang__UInt;
typedef unsigned short lang__UShort;
typedef int8_t lang__Int8;
typedef int16_t lang__Int16;
typedef int32_t lang__Int32;
typedef int64_t lang__Int64;
typedef uint8_t lang__UInt8;
typedef uint16_t lang__UInt16;
typedef uint32_t lang__UInt32;
typedef uint64_t lang__UInt64;
typedef uint8_t lang__Octet;
typedef size_t lang__SizeT;
typedef bool lang__Bool;
typedef long lang__LDouble;
typedef double lang__Double;
typedef float lang__Float;
typedef struct _lang__Range lang__Range;
struct _lang__Exception;
typedef struct _lang__Exception lang__Exception;
struct _lang__ObjectClass;
typedef struct _lang__ObjectClass lang__ObjectClass;
struct _lang__ClassClass;
typedef struct _lang__ClassClass lang__ClassClass;
struct _lang__NoneClass;
typedef struct _lang__NoneClass lang__NoneClass;
struct _lang__VoidClass;
typedef struct _lang__VoidClass lang__VoidClass;
struct _lang__PointerClass;
typedef struct _lang__PointerClass lang__PointerClass;
struct _lang__CharClass;
typedef struct _lang__CharClass lang__CharClass;
struct _lang__SCharClass;
typedef struct _lang__SCharClass lang__SCharClass;
struct _lang__UCharClass;
typedef struct _lang__UCharClass lang__UCharClass;
struct _lang__WCharClass;
typedef struct _lang__WCharClass lang__WCharClass;
struct _lang__StringClass;
typedef struct _lang__StringClass lang__StringClass;
struct _lang__LLongClass;
typedef struct _lang__LLongClass lang__LLongClass;
struct _lang__LongClass;
typedef struct _lang__LongClass lang__LongClass;
struct _lang__ShortClass;
typedef struct _lang__ShortClass lang__ShortClass;
struct _lang__IntClass;
typedef struct _lang__IntClass lang__IntClass;
struct _lang__ULLongClass;
typedef struct _lang__ULLongClass lang__ULLongClass;
struct _lang__ULongClass;
typedef struct _lang__ULongClass lang__ULongClass;
struct _lang__UIntClass;
typedef struct _lang__UIntClass lang__UIntClass;
struct _lang__UShortClass;
typedef struct _lang__UShortClass lang__UShortClass;
struct _lang__Int8Class;
typedef struct _lang__Int8Class lang__Int8Class;
struct _lang__Int16Class;
typedef struct _lang__Int16Class lang__Int16Class;
struct _lang__Int32Class;
typedef struct _lang__Int32Class lang__Int32Class;
struct _lang__Int64Class;
typedef struct _lang__Int64Class lang__Int64Class;
struct _lang__UInt8Class;
typedef struct _lang__UInt8Class lang__UInt8Class;
struct _lang__UInt16Class;
typedef struct _lang__UInt16Class lang__UInt16Class;
struct _lang__UInt32Class;
typedef struct _lang__UInt32Class lang__UInt32Class;
struct _lang__UInt64Class;
typedef struct _lang__UInt64Class lang__UInt64Class;
struct _lang__OctetClass;
typedef struct _lang__OctetClass lang__OctetClass;
struct _lang__SizeTClass;
typedef struct _lang__SizeTClass lang__SizeTClass;
struct _lang__BoolClass;
typedef struct _lang__BoolClass lang__BoolClass;
struct _lang__LDoubleClass;
typedef struct _lang__LDoubleClass lang__LDoubleClass;
struct _lang__DoubleClass;
typedef struct _lang__DoubleClass lang__DoubleClass;
struct _lang__FloatClass;
typedef struct _lang__FloatClass lang__FloatClass;
struct _lang__RangeClass;
typedef struct _lang__RangeClass lang__RangeClass;
struct _lang__ExceptionClass;
typedef struct _lang__ExceptionClass lang__ExceptionClass;

#include <custom-sdk/lang/stdio-fwd.h>
#include <custom-sdk/lang/math-fwd.h>
#include <custom-sdk/lang/memory-fwd.h>
#include <custom-sdk/lang/system-fwd.h>
#include <custom-sdk/lang/vararg-fwd.h>
lang__ObjectClass *Object_class();
void Object___defaults__(lang__Object* this);
void Object___defaults___impl(lang__Object* this);
void Object___destroy__(lang__Object* this);
void Object___destroy___impl(lang__Object* this);
lang__Bool Object_instanceOf(lang__Object* this, lang__Class* T);
lang__ClassClass *Class_class();
lang__Object* Class_alloc(lang__Class* this);
lang__Bool Class_inheritsFrom(lang__Class* this, lang__Class* T);
lang__NoneClass *None_class();
lang__None* None_new();
void None_init(lang__None* this);
void None_init_impl(lang__None* this);
lang__VoidClass *Void_class();
lang__PointerClass *Pointer_class();
lang__String Pointer_toString(lang__Pointer this);
lang__CharClass *Char_class();
lang__Bool Char_isAlphaNumeric(lang__Char this);
lang__Bool Char_isAlpha(lang__Char this);
lang__Bool Char_isLower(lang__Char this);
lang__Bool Char_isUpper(lang__Char this);
lang__Bool Char_isDigit(lang__Char this);
lang__Bool Char_isHexDigit(lang__Char this);
lang__Bool Char_isControl(lang__Char this);
lang__Bool Char_isGraph(lang__Char this);
lang__Bool Char_isPrintable(lang__Char this);
lang__Bool Char_isPunctuation(lang__Char this);
lang__Bool Char_isWhitespace(lang__Char this);
lang__Bool Char_isBlank(lang__Char this);
lang__Int Char_toInt(lang__Char this);
void Char_print(lang__Char this);
void Char_println(lang__Char this);
lang__SCharClass *SChar_class();
lang__UCharClass *UChar_class();
lang__WCharClass *WChar_class();
lang__StringClass *String_class();
lang__SizeT String_first(lang__String this);
lang__SizeT String_lastIndex(lang__String this);
lang__Char String_last(lang__String this);
void String_println(lang__String this);
lang__String String_append(lang__String this, lang__String other);
lang__String String_prepend(lang__String this, lang__String other);
lang__String String_format(lang__String this, ...);
lang__LLongClass *LLong_class();
lang__String LLong_toString(lang__LLong this);
lang__String LLong_toHexString(lang__LLong this);
lang__Bool LLong_isOdd(lang__LLong this);
lang__Bool LLong_isEven(lang__LLong this);
lang__Bool LLong_in(lang__LLong this, lang__Range range);
lang__LongClass *Long_class();
lang__ShortClass *Short_class();
lang__IntClass *Int_class();
lang__ULLongClass *ULLong_class();
lang__String ULLong_toString(lang__ULLong this);
lang__Bool ULLong_in(lang__ULLong this, lang__Range range);
lang__ULongClass *ULong_class();
lang__UIntClass *UInt_class();
lang__UShortClass *UShort_class();
lang__Int8Class *Int8_class();
lang__Int16Class *Int16_class();
lang__Int32Class *Int32_class();
lang__Int64Class *Int64_class();
lang__UInt8Class *UInt8_class();
lang__UInt16Class *UInt16_class();
lang__UInt32Class *UInt32_class();
lang__UInt64Class *UInt64_class();
lang__OctetClass *Octet_class();
lang__SizeTClass *SizeT_class();
lang__BoolClass *Bool_class();
lang__String Bool_toString(lang__Bool this);
lang__LDoubleClass *LDouble_class();
lang__DoubleClass *Double_class();
lang__FloatClass *Float_class();
lang__RangeClass *Range_class();
lang__Range Range_new(lang__Int min, lang__Int max);
lang__ExceptionClass *Exception_class();
lang__Exception* Exception_new_originMsg(lang__Class* origin, lang__String msg);
void Exception_init_originMsg(lang__Exception* this, lang__Class* origin, lang__String msg);
void Exception_init_originMsg_impl(lang__Exception* this, lang__Class* origin, lang__String msg);
lang__Exception* Exception_new_noOrigin(lang__String msg);
void Exception_init_noOrigin(lang__Exception* this, lang__String msg);
void Exception_init_noOrigin_impl(lang__Exception* this, lang__String msg);
void Exception_crash(lang__Exception* this);
void Exception_crash_impl(lang__Exception* this);
lang__String Exception_getMessage(lang__Exception* this);
lang__String Exception_getMessage_impl(lang__Exception* this);
void Exception_print(lang__Exception* this);
void Exception_print_impl(lang__Exception* this);
void Exception_throw(lang__Exception* this);
void Exception_throw_impl(lang__Exception* this);

#endif // __lang_types_fwd__
